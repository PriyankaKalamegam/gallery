{"version":3,"sources":["components/Pop.js","components/Images.js","App.js","serviceWorker.js","index.js"],"names":["Pop","className","onClick","this","props","closePopup","src","popImageUrl","alt","Component","Images","handlePopup","url","setState","showModal","state","imageUrl","imageUrlArray","images","map","index","key","width","height","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAuBeA,G,kLAhBX,OACE,yBAAKC,UAAU,eACb,yBAAKA,UAAU,cACb,4BACEA,UAAU,qBACVC,QAASC,KAAKC,MAAMC,YAFtB,KAMA,yBAAKC,IAAKH,KAAKC,MAAMG,YAAaC,IAAI,W,GAX9BC,cC+FHC,E,kDA9Fb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IAyDRO,YAAc,SAACC,GACb,EAAKC,SAAS,CACZC,WAAY,EAAKC,MAAMD,UACvBP,YAAaK,KA3Df,EAAKG,MAAQ,CACXC,SAAU,GACVC,cAAe,CACb,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,kBAEFH,UAAW,GACXP,YAAa,IAtDE,E,qDAiET,IAAD,OAEDW,EADcf,KAAKY,MAAME,cACFE,KAAI,SAACP,EAAKQ,GACrC,OACE,yBACEnB,UAAU,cACVK,IAAKM,EACLS,IAAKD,EACLlB,QAAS,kBAAM,EAAKS,YAAYC,IAChCJ,IAAI,GACJc,MAAM,QACNC,OAAO,aAIb,OACE,yBAAKtB,UAAU,UACZiB,EACAf,KAAKY,MAAMD,UACV,kBAAC,EAAD,CACEP,YAAaJ,KAAKY,MAAMR,YACxBF,WAAYF,KAAKQ,cAEjB,U,GAzFSF,aCWNe,E,uKARX,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,W,GAJUQ,aCMEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b41377df.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Images.css\";\r\nimport { Component } from \"react\";\r\n\r\nclass Pop extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"popupParent\">\r\n        <div className=\"popupImage\">\r\n          <button\r\n            className=\"imageClosingButton\"\r\n            onClick={this.props.closePopup}\r\n          >\r\n            X\r\n          </button>\r\n          <img src={this.props.popImageUrl} alt=\"\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pop;\r\n","import React from \"react\";\r\nimport \"./Images.css\";\r\nimport { Component } from \"react\";\r\nimport Pop from \"./Pop\";\r\n\r\nclass Images extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      imageUrl: \"\",\r\n      imageUrlArray: [\r\n        \"/photos/1.jpg\",\r\n        \"/photos/2.jpg\",\r\n        \"/photos/3.jpg\",\r\n        \"/photos/4.jpg\",\r\n        \"/photos/6.jpg\",\r\n        \"/photos/7.jpg\",\r\n        \"/photos/8.jpg\",\r\n        \"/photos/9.jpg\",\r\n        \"/photos/10.jpg\",\r\n        \"/photos/11.jpg\",\r\n        \"/photos/12.jpg\",\r\n        \"/photos/13.jpg\",\r\n        \"/photos/14.jpg\",\r\n        \"/photos/15.jpg\",\r\n        \"/photos/16.jpg\",\r\n        \"/photos/18.jpg\",\r\n        \"/photos/19.jpg\",\r\n        \"/photos/20.jpg\",\r\n        \"/photos/21.jpg\",\r\n        \"/photos/22.jpg\",\r\n        \"/photos/23.jpg\",\r\n        \"/photos/24.jpg\",\r\n        \"/photos/25.jpg\",\r\n        \"/photos/26.jpg\",\r\n        \"/photos/27.jpg\",\r\n        \"/photos/28.jpg\",\r\n        \"/photos/29.jpg\",\r\n        \"/photos/30.jpg\",\r\n        \"/photos/31.jpg\",\r\n        \"/photos/32.jpg\",\r\n        \"/photos/33.jpg\",\r\n        \"/photos/34.jpg\",\r\n        \"/photos/35.jpg\",\r\n        \"/photos/36.jpg\",\r\n        \"/photos/37.jpg\",\r\n        \"/photos/38.jpg\",\r\n        \"/photos/39.jpg\",\r\n        \"/photos/40.jpg\",\r\n        \"/photos/41.jpg\",\r\n        \"/photos/42.jpg\",\r\n        \"/photos/43.jpg\",\r\n        \"/photos/44.jpg\",\r\n        \"/photos/45.jpg\",\r\n        \"/photos/46.jpg\",\r\n        \"/photos/47.jpg\",\r\n        \"/photos/48.jpg\",\r\n        \"/photos/49.jpg\",\r\n      ],\r\n      showModal: \"\",\r\n      popImageUrl: \"\",\r\n    };\r\n  }\r\n\r\n  handlePopup = (url) => {\r\n    this.setState({\r\n      showModal: !this.state.showModal,\r\n      popImageUrl: url,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let imageUrlArray = this.state.imageUrlArray;\r\n    const images = imageUrlArray.map((url, index) => {\r\n      return (\r\n        <img\r\n          className=\"singleImage\"\r\n          src={url}\r\n          key={index}\r\n          onClick={() => this.handlePopup(url)}\r\n          alt=\"\"\r\n          width=\"200px\"\r\n          height=\"200px\"\r\n        />\r\n      );\r\n    });\r\n    return (\r\n      <div className=\"Images\">\r\n        {images}\r\n        {this.state.showModal ? (\r\n          <Pop\r\n            popImageUrl={this.state.popImageUrl}\r\n            closePopup={this.handlePopup}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Images;\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport { Component } from \"react\";\nimport Images from \"./components/Images\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Images></Images>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}